// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	types "github.com/zizouhuweidi/retro-station/internal/pkg/messaging/types"
)

// BusControl is an autogenerated mock type for the BusControl type
type BusControl struct {
	mock.Mock
}

// IsConsumed provides a mock function with given fields: _a0
func (_m *BusControl) IsConsumed(_a0 func(types.IMessage)) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields: ctx
func (_m *BusControl) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *BusControl) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBusControl creates a new instance of BusControl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBusControl(t interface {
	mock.TestingT
	Cleanup(func())
}) *BusControl {
	mock := &BusControl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
