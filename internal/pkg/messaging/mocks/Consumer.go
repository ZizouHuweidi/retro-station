// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	consumer "github.com/zizouhuweidi/retro-station/internal/pkg/messaging/consumer"

	mock "github.com/stretchr/testify/mock"

	types "github.com/zizouhuweidi/retro-station/internal/pkg/messaging/types"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// ConnectHandler provides a mock function with given fields: handler
func (_m *Consumer) ConnectHandler(handler consumer.ConsumerHandler) {
	_m.Called(handler)
}

// GetName provides a mock function with given fields:
func (_m *Consumer) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsConsumed provides a mock function with given fields: _a0
func (_m *Consumer) IsConsumed(_a0 func(types.IMessage)) {
	_m.Called(_a0)
}

// Start provides a mock function with given fields: ctx
func (_m *Consumer) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Consumer) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConsumer creates a new instance of Consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consumer {
	mock := &Consumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
