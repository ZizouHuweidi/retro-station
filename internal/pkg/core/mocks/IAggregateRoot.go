// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/zizouhuweidi/retro-station/internal/pkg/core/domain"

	time "time"

	uuid "github.com/satori/go.uuid"
)

// IAggregateRoot is an autogenerated mock type for the IAggregateRoot type
type IAggregateRoot struct {
	mock.Mock
}

// AddDomainEvents provides a mock function with given fields: event
func (_m *IAggregateRoot) AddDomainEvents(event domain.IDomainEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for AddDomainEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IDomainEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatedAt provides a mock function with given fields:
func (_m *IAggregateRoot) CreatedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreatedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetUncommittedEvents provides a mock function with given fields:
func (_m *IAggregateRoot) GetUncommittedEvents() []domain.IDomainEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUncommittedEvents")
	}

	var r0 []domain.IDomainEvent
	if rf, ok := ret.Get(0).(func() []domain.IDomainEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.IDomainEvent)
		}
	}

	return r0
}

// HasUncommittedEvents provides a mock function with given fields:
func (_m *IAggregateRoot) HasUncommittedEvents() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasUncommittedEvents")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Id provides a mock function with given fields:
func (_m *IAggregateRoot) Id() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// MarkUncommittedEventAsCommitted provides a mock function with given fields:
func (_m *IAggregateRoot) MarkUncommittedEventAsCommitted() {
	_m.Called()
}

// OriginalVersion provides a mock function with given fields:
func (_m *IAggregateRoot) OriginalVersion() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OriginalVersion")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SetEntityType provides a mock function with given fields: entityType
func (_m *IAggregateRoot) SetEntityType(entityType string) {
	_m.Called(entityType)
}

// SetId provides a mock function with given fields: id
func (_m *IAggregateRoot) SetId(id uuid.UUID) {
	_m.Called(id)
}

// SetUpdatedAt provides a mock function with given fields: updatedAt
func (_m *IAggregateRoot) SetUpdatedAt(updatedAt time.Time) {
	_m.Called(updatedAt)
}

// String provides a mock function with given fields:
func (_m *IAggregateRoot) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UpdatedAt provides a mock function with given fields:
func (_m *IAggregateRoot) UpdatedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdatedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// NewIAggregateRoot creates a new instance of IAggregateRoot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAggregateRoot(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAggregateRoot {
	mock := &IAggregateRoot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
