// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	metadata "github.com/zizouhuweidi/retro-station/internal/pkg/core/metadata"
)

// MetadataSerializer is an autogenerated mock type for the MetadataSerializer type
type MetadataSerializer struct {
	mock.Mock
}

// Deserialize provides a mock function with given fields: bytes
func (_m *MetadataSerializer) Deserialize(bytes []byte) (metadata.Metadata, error) {
	ret := _m.Called(bytes)

	if len(ret) == 0 {
		panic("no return value specified for Deserialize")
	}

	var r0 metadata.Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (metadata.Metadata, error)); ok {
		return rf(bytes)
	}
	if rf, ok := ret.Get(0).(func([]byte) metadata.Metadata); ok {
		r0 = rf(bytes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metadata.Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(bytes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Serialize provides a mock function with given fields: meta
func (_m *MetadataSerializer) Serialize(meta metadata.Metadata) ([]byte, error) {
	ret := _m.Called(meta)

	if len(ret) == 0 {
		panic("no return value specified for Serialize")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(metadata.Metadata) ([]byte, error)); ok {
		return rf(meta)
	}
	if rf, ok := ret.Get(0).(func(metadata.Metadata) []byte); ok {
		r0 = rf(meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(metadata.Metadata) error); ok {
		r1 = rf(meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMetadataSerializer creates a new instance of MetadataSerializer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataSerializer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataSerializer {
	mock := &MetadataSerializer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
