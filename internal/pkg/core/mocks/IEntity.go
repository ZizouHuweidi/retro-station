// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// IEntity is an autogenerated mock type for the IEntity type
type IEntity struct {
	mock.Mock
}

// CreatedAt provides a mock function with given fields:
func (_m *IEntity) CreatedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreatedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Id provides a mock function with given fields:
func (_m *IEntity) Id() uuid.UUID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 uuid.UUID
	if rf, ok := ret.Get(0).(func() uuid.UUID); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	return r0
}

// SetEntityType provides a mock function with given fields: entityType
func (_m *IEntity) SetEntityType(entityType string) {
	_m.Called(entityType)
}

// SetId provides a mock function with given fields: id
func (_m *IEntity) SetId(id uuid.UUID) {
	_m.Called(id)
}

// SetUpdatedAt provides a mock function with given fields: updatedAt
func (_m *IEntity) SetUpdatedAt(updatedAt time.Time) {
	_m.Called(updatedAt)
}

// UpdatedAt provides a mock function with given fields:
func (_m *IEntity) UpdatedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UpdatedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// NewIEntity creates a new instance of IEntity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIEntity(t interface {
	mock.TestingT
	Cleanup(func())
}) *IEntity {
	mock := &IEntity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
