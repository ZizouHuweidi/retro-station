// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	domain "github.com/zizouhuweidi/retro-station/internal/pkg/core/domain"
)

// When is an autogenerated mock type for the When type
type When struct {
	mock.Mock
}

// When provides a mock function with given fields: event
func (_m *When) When(event domain.IDomainEvent) error {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for When")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.IDomainEvent) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWhen creates a new instance of When. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWhen(t interface {
	mock.TestingT
	Cleanup(func())
}) *When {
	mock := &When{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
