// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	appendResult "github.com/zizouhuweidi/retro-station/internal/pkg/es/models/append_result"

	expectedStreamVersion "github.com/zizouhuweidi/retro-station/internal/pkg/es/models/stream_version"

	metadata "github.com/zizouhuweidi/retro-station/internal/pkg/core/metadata"

	mock "github.com/stretchr/testify/mock"

	models "github.com/zizouhuweidi/retro-station/internal/pkg/es/models"

	readPosition "github.com/zizouhuweidi/retro-station/internal/pkg/es/models/stream_position/read_position"

	uuid "github.com/satori/go.uuid"
)

// AggregateStore is an autogenerated mock type for the AggregateStore type
type AggregateStore[T models.IHaveEventSourcedAggregate] struct {
	mock.Mock
}

// Exists provides a mock function with given fields: ctx, aggregateId
func (_m *AggregateStore[T]) Exists(ctx context.Context, aggregateId uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, aggregateId)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (bool, error)); ok {
		return rf(ctx, aggregateId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, aggregateId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, aggregateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Load provides a mock function with given fields: ctx, aggregateId
func (_m *AggregateStore[T]) Load(ctx context.Context, aggregateId uuid.UUID) (T, error) {
	ret := _m.Called(ctx, aggregateId)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (T, error)); ok {
		return rf(ctx, aggregateId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) T); ok {
		r0 = rf(ctx, aggregateId)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, aggregateId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadWithReadPosition provides a mock function with given fields: ctx, aggregateId, position
func (_m *AggregateStore[T]) LoadWithReadPosition(ctx context.Context, aggregateId uuid.UUID, position readPosition.StreamReadPosition) (T, error) {
	ret := _m.Called(ctx, aggregateId, position)

	if len(ret) == 0 {
		panic("no return value specified for LoadWithReadPosition")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, readPosition.StreamReadPosition) (T, error)); ok {
		return rf(ctx, aggregateId, position)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, readPosition.StreamReadPosition) T); ok {
		r0 = rf(ctx, aggregateId, position)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, readPosition.StreamReadPosition) error); ok {
		r1 = rf(ctx, aggregateId, position)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: aggregate, _a1, ctx
func (_m *AggregateStore[T]) Store(aggregate T, _a1 metadata.Metadata, ctx context.Context) (*appendResult.AppendEventsResult, error) {
	ret := _m.Called(aggregate, _a1, ctx)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 *appendResult.AppendEventsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(T, metadata.Metadata, context.Context) (*appendResult.AppendEventsResult, error)); ok {
		return rf(aggregate, _a1, ctx)
	}
	if rf, ok := ret.Get(0).(func(T, metadata.Metadata, context.Context) *appendResult.AppendEventsResult); ok {
		r0 = rf(aggregate, _a1, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appendResult.AppendEventsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(T, metadata.Metadata, context.Context) error); ok {
		r1 = rf(aggregate, _a1, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreWithVersion provides a mock function with given fields: aggregate, _a1, expectedVersion, ctx
func (_m *AggregateStore[T]) StoreWithVersion(aggregate T, _a1 metadata.Metadata, expectedVersion expectedStreamVersion.ExpectedStreamVersion, ctx context.Context) (*appendResult.AppendEventsResult, error) {
	ret := _m.Called(aggregate, _a1, expectedVersion, ctx)

	if len(ret) == 0 {
		panic("no return value specified for StoreWithVersion")
	}

	var r0 *appendResult.AppendEventsResult
	var r1 error
	if rf, ok := ret.Get(0).(func(T, metadata.Metadata, expectedStreamVersion.ExpectedStreamVersion, context.Context) (*appendResult.AppendEventsResult, error)); ok {
		return rf(aggregate, _a1, expectedVersion, ctx)
	}
	if rf, ok := ret.Get(0).(func(T, metadata.Metadata, expectedStreamVersion.ExpectedStreamVersion, context.Context) *appendResult.AppendEventsResult); ok {
		r0 = rf(aggregate, _a1, expectedVersion, ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appendResult.AppendEventsResult)
		}
	}

	if rf, ok := ret.Get(1).(func(T, metadata.Metadata, expectedStreamVersion.ExpectedStreamVersion, context.Context) error); ok {
		r1 = rf(aggregate, _a1, expectedVersion, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAggregateStore creates a new instance of AggregateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAggregateStore[T models.IHaveEventSourcedAggregate](t interface {
	mock.TestingT
	Cleanup(func())
}) *AggregateStore[T] {
	mock := &AggregateStore[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
