// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	fmt "fmt"

	mock "github.com/stretchr/testify/mock"
)

// InvalidDeliveryAddressError is an autogenerated mock type for the InvalidDeliveryAddressError type
type InvalidDeliveryAddressError struct {
	mock.Mock
}

// Cause provides a mock function with given fields:
func (_m *InvalidDeliveryAddressError) Cause() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Error provides a mock function with given fields:
func (_m *InvalidDeliveryAddressError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Format provides a mock function with given fields: f, verb
func (_m *InvalidDeliveryAddressError) Format(f fmt.State, verb rune) {
	_m.Called(f, verb)
}

// IsBadRequestError provides a mock function with given fields:
func (_m *InvalidDeliveryAddressError) IsBadRequestError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsBadRequestError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsCustomError provides a mock function with given fields:
func (_m *InvalidDeliveryAddressError) IsCustomError() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsCustomError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Message provides a mock function with given fields:
func (_m *InvalidDeliveryAddressError) Message() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Message")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Status provides a mock function with given fields:
func (_m *InvalidDeliveryAddressError) Status() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Unwrap provides a mock function with given fields:
func (_m *InvalidDeliveryAddressError) Unwrap() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unwrap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewInvalidDeliveryAddressError creates a new instance of InvalidDeliveryAddressError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInvalidDeliveryAddressError(t interface {
	mock.TestingT
	Cleanup(func())
}) *InvalidDeliveryAddressError {
	mock := &InvalidDeliveryAddressError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
