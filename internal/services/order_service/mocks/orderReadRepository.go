// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	read_models "github.com/zizouhuweidi/retro-station/internal/services/orderservice/internal/orders/models/orders/read_models"

	utils "github.com/zizouhuweidi/retro-station/internal/pkg/utils"

	uuid "github.com/satori/go.uuid"
)

// orderReadRepository is an autogenerated mock type for the orderReadRepository type
type orderReadRepository struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *orderReadRepository) CreateOrder(ctx context.Context, order *read_models.OrderReadModel) (*read_models.OrderReadModel, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *read_models.OrderReadModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *read_models.OrderReadModel) (*read_models.OrderReadModel, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *read_models.OrderReadModel) *read_models.OrderReadModel); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*read_models.OrderReadModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *read_models.OrderReadModel) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrderByID provides a mock function with given fields: ctx, _a1
func (_m *orderReadRepository) DeleteOrderByID(ctx context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrderByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOrders provides a mock function with given fields: ctx, listQuery
func (_m *orderReadRepository) GetAllOrders(ctx context.Context, listQuery *utils.ListQuery) (*utils.ListResult[*read_models.OrderReadModel], error) {
	ret := _m.Called(ctx, listQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrders")
	}

	var r0 *utils.ListResult[*read_models.OrderReadModel]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *utils.ListQuery) (*utils.ListResult[*read_models.OrderReadModel], error)); ok {
		return rf(ctx, listQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *utils.ListQuery) *utils.ListResult[*read_models.OrderReadModel]); ok {
		r0 = rf(ctx, listQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ListResult[*read_models.OrderReadModel])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *utils.ListQuery) error); ok {
		r1 = rf(ctx, listQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderById provides a mock function with given fields: ctx, _a1
func (_m *orderReadRepository) GetOrderById(ctx context.Context, _a1 uuid.UUID) (*read_models.OrderReadModel, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderById")
	}

	var r0 *read_models.OrderReadModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*read_models.OrderReadModel, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *read_models.OrderReadModel); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*read_models.OrderReadModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderByOrderId provides a mock function with given fields: ctx, orderId
func (_m *orderReadRepository) GetOrderByOrderId(ctx context.Context, orderId uuid.UUID) (*read_models.OrderReadModel, error) {
	ret := _m.Called(ctx, orderId)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByOrderId")
	}

	var r0 *read_models.OrderReadModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*read_models.OrderReadModel, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *read_models.OrderReadModel); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*read_models.OrderReadModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchOrders provides a mock function with given fields: ctx, searchText, listQuery
func (_m *orderReadRepository) SearchOrders(ctx context.Context, searchText string, listQuery *utils.ListQuery) (*utils.ListResult[*read_models.OrderReadModel], error) {
	ret := _m.Called(ctx, searchText, listQuery)

	if len(ret) == 0 {
		panic("no return value specified for SearchOrders")
	}

	var r0 *utils.ListResult[*read_models.OrderReadModel]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.ListQuery) (*utils.ListResult[*read_models.OrderReadModel], error)); ok {
		return rf(ctx, searchText, listQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.ListQuery) *utils.ListResult[*read_models.OrderReadModel]); ok {
		r0 = rf(ctx, searchText, listQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ListResult[*read_models.OrderReadModel])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *utils.ListQuery) error); ok {
		r1 = rf(ctx, searchText, listQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, order
func (_m *orderReadRepository) UpdateOrder(ctx context.Context, order *read_models.OrderReadModel) (*read_models.OrderReadModel, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 *read_models.OrderReadModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *read_models.OrderReadModel) (*read_models.OrderReadModel, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *read_models.OrderReadModel) *read_models.OrderReadModel); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*read_models.OrderReadModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *read_models.OrderReadModel) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newOrderReadRepository creates a new instance of orderReadRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newOrderReadRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *orderReadRepository {
	mock := &orderReadRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
