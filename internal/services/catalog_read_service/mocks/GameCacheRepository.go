// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/zizouhuweidi/retro-station/internal/services/catalogreadservice/internal/games/models"
)

// GameCacheRepository is an autogenerated mock type for the GameCacheRepository type
type GameCacheRepository struct {
	mock.Mock
}

// DeleteAllGames provides a mock function with given fields: ctx
func (_m *GameCacheRepository) DeleteAllGames(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllGames")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGame provides a mock function with given fields: ctx, key
func (_m *GameCacheRepository) DeleteGame(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGameById provides a mock function with given fields: ctx, key
func (_m *GameCacheRepository) GetGameById(ctx context.Context, key string) (*models.Game, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for GetGameById")
	}

	var r0 *models.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Game, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Game); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutGame provides a mock function with given fields: ctx, key, game
func (_m *GameCacheRepository) PutGame(ctx context.Context, key string, game *models.Game) error {
	ret := _m.Called(ctx, key, game)

	if len(ret) == 0 {
		panic("no return value specified for PutGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Game) error); ok {
		r0 = rf(ctx, key, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewGameCacheRepository creates a new instance of GameCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GameCacheRepository {
	mock := &GameCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
