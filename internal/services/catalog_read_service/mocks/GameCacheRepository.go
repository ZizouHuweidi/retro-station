// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/zizouhuweidi/retro-station/internal/services/catalogreadservice/internal/games/models"
)

// GameCacheRepository is an autogenerated mock type for the GameCacheRepository type
type GameCacheRepository struct {
	mock.Mock
}

type GameCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GameCacheRepository) EXPECT() *GameCacheRepository_Expecter {
	return &GameCacheRepository_Expecter{mock: &_m.Mock}
}

// DeleteAllGames provides a mock function with given fields: ctx
func (_m *GameCacheRepository) DeleteAllGames(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GameCacheRepository_DeleteAllGames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllGames'
type GameCacheRepository_DeleteAllGames_Call struct {
	*mock.Call
}

// DeleteAllGames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GameCacheRepository_Expecter) DeleteAllGames(ctx interface{}) *GameCacheRepository_DeleteAllGames_Call {
	return &GameCacheRepository_DeleteAllGames_Call{Call: _e.mock.On("DeleteAllGames", ctx)}
}

func (_c *GameCacheRepository_DeleteAllGames_Call) Run(run func(ctx context.Context)) *GameCacheRepository_DeleteAllGames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GameCacheRepository_DeleteAllGames_Call) Return(_a0 error) *GameCacheRepository_DeleteAllGames_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GameCacheRepository_DeleteAllGames_Call) RunAndReturn(run func(context.Context) error) *GameCacheRepository_DeleteAllGames_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGame provides a mock function with given fields: ctx, key
func (_m *GameCacheRepository) DeleteGame(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GameCacheRepository_DeleteGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGame'
type GameCacheRepository_DeleteGame_Call struct {
	*mock.Call
}

// DeleteGame is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *GameCacheRepository_Expecter) DeleteGame(ctx interface{}, key interface{}) *GameCacheRepository_DeleteGame_Call {
	return &GameCacheRepository_DeleteGame_Call{Call: _e.mock.On("DeleteGame", ctx, key)}
}

func (_c *GameCacheRepository_DeleteGame_Call) Run(run func(ctx context.Context, key string)) *GameCacheRepository_DeleteGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GameCacheRepository_DeleteGame_Call) Return(_a0 error) *GameCacheRepository_DeleteGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GameCacheRepository_DeleteGame_Call) RunAndReturn(run func(context.Context, string) error) *GameCacheRepository_DeleteGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameById provides a mock function with given fields: ctx, key
func (_m *GameCacheRepository) GetGameById(ctx context.Context, key string) (*models.Game, error) {
	ret := _m.Called(ctx, key)

	var r0 *models.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Game, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Game); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GameCacheRepository_GetGameById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameById'
type GameCacheRepository_GetGameById_Call struct {
	*mock.Call
}

// GetGameById is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *GameCacheRepository_Expecter) GetGameById(ctx interface{}, key interface{}) *GameCacheRepository_GetGameById_Call {
	return &GameCacheRepository_GetGameById_Call{Call: _e.mock.On("GetGameById", ctx, key)}
}

func (_c *GameCacheRepository_GetGameById_Call) Run(run func(ctx context.Context, key string)) *GameCacheRepository_GetGameById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GameCacheRepository_GetGameById_Call) Return(_a0 *models.Game, _a1 error) *GameCacheRepository_GetGameById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GameCacheRepository_GetGameById_Call) RunAndReturn(run func(context.Context, string) (*models.Game, error)) *GameCacheRepository_GetGameById_Call {
	_c.Call.Return(run)
	return _c
}

// PutGame provides a mock function with given fields: ctx, key, game
func (_m *GameCacheRepository) PutGame(ctx context.Context, key string, game *models.Game) error {
	ret := _m.Called(ctx, key, game)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Game) error); ok {
		r0 = rf(ctx, key, game)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GameCacheRepository_PutGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutGame'
type GameCacheRepository_PutGame_Call struct {
	*mock.Call
}

// PutGame is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - game *models.Game
func (_e *GameCacheRepository_Expecter) PutGame(ctx interface{}, key interface{}, game interface{}) *GameCacheRepository_PutGame_Call {
	return &GameCacheRepository_PutGame_Call{Call: _e.mock.On("PutGame", ctx, key, game)}
}

func (_c *GameCacheRepository_PutGame_Call) Run(run func(ctx context.Context, key string, game *models.Game)) *GameCacheRepository_PutGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.Game))
	})
	return _c
}

func (_c *GameCacheRepository_PutGame_Call) Return(_a0 error) *GameCacheRepository_PutGame_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GameCacheRepository_PutGame_Call) RunAndReturn(run func(context.Context, string, *models.Game) error) *GameCacheRepository_PutGame_Call {
	_c.Call.Return(run)
	return _c
}

// NewGameCacheRepository creates a new instance of GameCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *GameCacheRepository {
	mock := &GameCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
