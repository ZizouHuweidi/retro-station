// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: catalog_write_service/games.proto

package games_service

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GamesService_CreateGame_FullMethodName  = "/games_service.GamesService/CreateGame"
	GamesService_UpdateGame_FullMethodName  = "/games_service.GamesService/UpdateGame"
	GamesService_GetGameById_FullMethodName = "/games_service.GamesService/GetGameById"
)

// GamesServiceClient is the client API for GamesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamesServiceClient interface {
	CreateGame(ctx context.Context, in *CreateGameReq, opts ...grpc.CallOption) (*CreateGameRes, error)
	UpdateGame(ctx context.Context, in *UpdateGameReq, opts ...grpc.CallOption) (*UpdateGameRes, error)
	GetGameById(ctx context.Context, in *GetGameByIdReq, opts ...grpc.CallOption) (*GetGameByIdRes, error)
}

type gamesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamesServiceClient(cc grpc.ClientConnInterface) GamesServiceClient {
	return &gamesServiceClient{cc}
}

func (c *gamesServiceClient) CreateGame(ctx context.Context, in *CreateGameReq, opts ...grpc.CallOption) (*CreateGameRes, error) {
	out := new(CreateGameRes)
	err := c.cc.Invoke(ctx, GamesService_CreateGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesServiceClient) UpdateGame(ctx context.Context, in *UpdateGameReq, opts ...grpc.CallOption) (*UpdateGameRes, error) {
	out := new(UpdateGameRes)
	err := c.cc.Invoke(ctx, GamesService_UpdateGame_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gamesServiceClient) GetGameById(ctx context.Context, in *GetGameByIdReq, opts ...grpc.CallOption) (*GetGameByIdRes, error) {
	out := new(GetGameByIdRes)
	err := c.cc.Invoke(ctx, GamesService_GetGameById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GamesServiceServer is the server API for GamesService service.
// All implementations should embed UnimplementedGamesServiceServer
// for forward compatibility
type GamesServiceServer interface {
	CreateGame(context.Context, *CreateGameReq) (*CreateGameRes, error)
	UpdateGame(context.Context, *UpdateGameReq) (*UpdateGameRes, error)
	GetGameById(context.Context, *GetGameByIdReq) (*GetGameByIdRes, error)
}

// UnimplementedGamesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGamesServiceServer struct{}

func (UnimplementedGamesServiceServer) CreateGame(context.Context, *CreateGameReq) (*CreateGameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}

func (UnimplementedGamesServiceServer) UpdateGame(context.Context, *UpdateGameReq) (*UpdateGameRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGame not implemented")
}

func (UnimplementedGamesServiceServer) GetGameById(context.Context, *GetGameByIdReq) (*GetGameByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameById not implemented")
}

// UnsafeGamesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamesServiceServer will
// result in compilation errors.
type UnsafeGamesServiceServer interface {
	mustEmbedUnimplementedGamesServiceServer()
}

func RegisterGamesServiceServer(s grpc.ServiceRegistrar, srv GamesServiceServer) {
	s.RegisterService(&GamesService_ServiceDesc, srv)
}

func _GamesService_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServiceServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamesService_CreateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServiceServer).CreateGame(ctx, req.(*CreateGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GamesService_UpdateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServiceServer).UpdateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamesService_UpdateGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServiceServer).UpdateGame(ctx, req.(*UpdateGameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GamesService_GetGameById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GamesServiceServer).GetGameById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GamesService_GetGameById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GamesServiceServer).GetGameById(ctx, req.(*GetGameByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GamesService_ServiceDesc is the grpc.ServiceDesc for GamesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "games_service.GamesService",
	HandlerType: (*GamesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _GamesService_CreateGame_Handler,
		},
		{
			MethodName: "UpdateGame",
			Handler:    _GamesService_UpdateGame_Handler,
		},
		{
			MethodName: "GetGameById",
			Handler:    _GamesService_GetGameById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog_write_service/games.proto",
}
