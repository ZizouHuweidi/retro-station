// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	data "github.com/zizouhuweidi/retro-station/internal/services/catalogwriteservice/internal/games/contracts/data"
)

// CatalogContext is an autogenerated mock type for the CatalogContext type
type CatalogContext struct {
	mock.Mock
}

type CatalogContext_Expecter struct {
	mock *mock.Mock
}

func (_m *CatalogContext) EXPECT() *CatalogContext_Expecter {
	return &CatalogContext_Expecter{mock: &_m.Mock}
}

// Games provides a mock function with given fields:
func (_m *CatalogContext) Games() data.GameRepository {
	ret := _m.Called()

	var r0 data.GameRepository
	if rf, ok := ret.Get(0).(func() data.GameRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.GameRepository)
		}
	}

	return r0
}

// CatalogContext_Games_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Games'
type CatalogContext_Games_Call struct {
	*mock.Call
}

// Games is a helper method to define mock.On call
func (_e *CatalogContext_Expecter) Games() *CatalogContext_Games_Call {
	return &CatalogContext_Games_Call{Call: _e.mock.On("Games")}
}

func (_c *CatalogContext_Games_Call) Run(run func()) *CatalogContext_Games_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *CatalogContext_Games_Call) Return(_a0 data.GameRepository) *CatalogContext_Games_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CatalogContext_Games_Call) RunAndReturn(run func() data.GameRepository) *CatalogContext_Games_Call {
	_c.Call.Return(run)
	return _c
}

// NewCatalogContext creates a new instance of CatalogContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCatalogContext(t interface {
	mock.TestingT
	Cleanup(func())
},
) *CatalogContext {
	mock := &CatalogContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
