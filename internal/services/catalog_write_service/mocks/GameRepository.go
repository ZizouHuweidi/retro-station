// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/zizouhuweidi/retro-station/internal/services/catalogwriteservice/internal/games/models"

	utils "github.com/zizouhuweidi/retro-station/internal/pkg/utils"

	uuid "github.com/satori/go.uuid"
)

// GameRepository is an autogenerated mock type for the GameRepository type
type GameRepository struct {
	mock.Mock
}

// CreateGame provides a mock function with given fields: ctx, game
func (_m *GameRepository) CreateGame(ctx context.Context, game *models.Game) (*models.Game, error) {
	ret := _m.Called(ctx, game)

	if len(ret) == 0 {
		panic("no return value specified for CreateGame")
	}

	var r0 *models.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Game) (*models.Game, error)); ok {
		return rf(ctx, game)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Game) *models.Game); ok {
		r0 = rf(ctx, game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Game) error); ok {
		r1 = rf(ctx, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGameByID provides a mock function with given fields: ctx, _a1
func (_m *GameRepository) DeleteGameByID(ctx context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGameByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllGames provides a mock function with given fields: ctx, listQuery
func (_m *GameRepository) GetAllGames(ctx context.Context, listQuery *utils.ListQuery) (*utils.ListResult[*models.Game], error) {
	ret := _m.Called(ctx, listQuery)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGames")
	}

	var r0 *utils.ListResult[*models.Game]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *utils.ListQuery) (*utils.ListResult[*models.Game], error)); ok {
		return rf(ctx, listQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *utils.ListQuery) *utils.ListResult[*models.Game]); ok {
		r0 = rf(ctx, listQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ListResult[*models.Game])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *utils.ListQuery) error); ok {
		r1 = rf(ctx, listQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameById provides a mock function with given fields: ctx, _a1
func (_m *GameRepository) GetGameById(ctx context.Context, _a1 uuid.UUID) (*models.Game, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetGameById")
	}

	var r0 *models.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Game, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Game); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchGames provides a mock function with given fields: ctx, searchText, listQuery
func (_m *GameRepository) SearchGames(ctx context.Context, searchText string, listQuery *utils.ListQuery) (*utils.ListResult[*models.Game], error) {
	ret := _m.Called(ctx, searchText, listQuery)

	if len(ret) == 0 {
		panic("no return value specified for SearchGames")
	}

	var r0 *utils.ListResult[*models.Game]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.ListQuery) (*utils.ListResult[*models.Game], error)); ok {
		return rf(ctx, searchText, listQuery)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *utils.ListQuery) *utils.ListResult[*models.Game]); ok {
		r0 = rf(ctx, searchText, listQuery)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ListResult[*models.Game])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *utils.ListQuery) error); ok {
		r1 = rf(ctx, searchText, listQuery)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGame provides a mock function with given fields: ctx, game
func (_m *GameRepository) UpdateGame(ctx context.Context, game *models.Game) (*models.Game, error) {
	ret := _m.Called(ctx, game)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGame")
	}

	var r0 *models.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Game) (*models.Game, error)); ok {
		return rf(ctx, game)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.Game) *models.Game); ok {
		r0 = rf(ctx, game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.Game) error); ok {
		r1 = rf(ctx, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGameRepository creates a new instance of GameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGameRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GameRepository {
	mock := &GameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
