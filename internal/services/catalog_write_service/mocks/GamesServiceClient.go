// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	gamesservice "github.com/zizouhuweidi/retro-station/internal/services/catalogwriteservice/internal/shared/grpc/genproto"
)

// GamesServiceClient is an autogenerated mock type for the GamesServiceClient type
type GamesServiceClient struct {
	mock.Mock
}

type GamesServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *GamesServiceClient) EXPECT() *GamesServiceClient_Expecter {
	return &GamesServiceClient_Expecter{mock: &_m.Mock}
}

// CreateGame provides a mock function with given fields: ctx, in, opts
func (_m *GamesServiceClient) CreateGame(ctx context.Context, in *gamesservice.CreateGameReq, opts ...grpc.CallOption) (*gamesservice.CreateGameRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gamesservice.CreateGameRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.CreateGameReq, ...grpc.CallOption) (*gamesservice.CreateGameRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.CreateGameReq, ...grpc.CallOption) *gamesservice.CreateGameRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gamesservice.CreateGameRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gamesservice.CreateGameReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesServiceClient_CreateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGame'
type GamesServiceClient_CreateGame_Call struct {
	*mock.Call
}

// CreateGame is a helper method to define mock.On call
//   - ctx context.Context
//   - in *games_service.CreateGameReq
//   - opts ...grpc.CallOption
func (_e *GamesServiceClient_Expecter) CreateGame(ctx interface{}, in interface{}, opts ...interface{}) *GamesServiceClient_CreateGame_Call {
	return &GamesServiceClient_CreateGame_Call{Call: _e.mock.On("CreateGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GamesServiceClient_CreateGame_Call) Run(run func(ctx context.Context, in *gamesservice.CreateGameReq, opts ...grpc.CallOption)) *GamesServiceClient_CreateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gamesservice.CreateGameReq), variadicArgs...)
	})
	return _c
}

func (_c *GamesServiceClient_CreateGame_Call) Return(_a0 *gamesservice.CreateGameRes, _a1 error) *GamesServiceClient_CreateGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesServiceClient_CreateGame_Call) RunAndReturn(run func(context.Context, *gamesservice.CreateGameReq, ...grpc.CallOption) (*gamesservice.CreateGameRes, error)) *GamesServiceClient_CreateGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameById provides a mock function with given fields: ctx, in, opts
func (_m *GamesServiceClient) GetGameById(ctx context.Context, in *gamesservice.GetGameByIdReq, opts ...grpc.CallOption) (*gamesservice.GetGameByIdRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gamesservice.GetGameByIdRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.GetGameByIdReq, ...grpc.CallOption) (*gamesservice.GetGameByIdRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.GetGameByIdReq, ...grpc.CallOption) *gamesservice.GetGameByIdRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gamesservice.GetGameByIdRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gamesservice.GetGameByIdReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesServiceClient_GetGameById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameById'
type GamesServiceClient_GetGameById_Call struct {
	*mock.Call
}

// GetGameById is a helper method to define mock.On call
//   - ctx context.Context
//   - in *games_service.GetGameByIdReq
//   - opts ...grpc.CallOption
func (_e *GamesServiceClient_Expecter) GetGameById(ctx interface{}, in interface{}, opts ...interface{}) *GamesServiceClient_GetGameById_Call {
	return &GamesServiceClient_GetGameById_Call{Call: _e.mock.On("GetGameById",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GamesServiceClient_GetGameById_Call) Run(run func(ctx context.Context, in *gamesservice.GetGameByIdReq, opts ...grpc.CallOption)) *GamesServiceClient_GetGameById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gamesservice.GetGameByIdReq), variadicArgs...)
	})
	return _c
}

func (_c *GamesServiceClient_GetGameById_Call) Return(_a0 *gamesservice.GetGameByIdRes, _a1 error) *GamesServiceClient_GetGameById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesServiceClient_GetGameById_Call) RunAndReturn(run func(context.Context, *gamesservice.GetGameByIdReq, ...grpc.CallOption) (*gamesservice.GetGameByIdRes, error)) *GamesServiceClient_GetGameById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGame provides a mock function with given fields: ctx, in, opts
func (_m *GamesServiceClient) UpdateGame(ctx context.Context, in *gamesservice.UpdateGameReq, opts ...grpc.CallOption) (*gamesservice.UpdateGameRes, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *gamesservice.UpdateGameRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.UpdateGameReq, ...grpc.CallOption) (*gamesservice.UpdateGameRes, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.UpdateGameReq, ...grpc.CallOption) *gamesservice.UpdateGameRes); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gamesservice.UpdateGameRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gamesservice.UpdateGameReq, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesServiceClient_UpdateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGame'
type GamesServiceClient_UpdateGame_Call struct {
	*mock.Call
}

// UpdateGame is a helper method to define mock.On call
//   - ctx context.Context
//   - in *games_service.UpdateGameReq
//   - opts ...grpc.CallOption
func (_e *GamesServiceClient_Expecter) UpdateGame(ctx interface{}, in interface{}, opts ...interface{}) *GamesServiceClient_UpdateGame_Call {
	return &GamesServiceClient_UpdateGame_Call{Call: _e.mock.On("UpdateGame",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *GamesServiceClient_UpdateGame_Call) Run(run func(ctx context.Context, in *gamesservice.UpdateGameReq, opts ...grpc.CallOption)) *GamesServiceClient_UpdateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*gamesservice.UpdateGameReq), variadicArgs...)
	})
	return _c
}

func (_c *GamesServiceClient_UpdateGame_Call) Return(_a0 *gamesservice.UpdateGameRes, _a1 error) *GamesServiceClient_UpdateGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesServiceClient_UpdateGame_Call) RunAndReturn(run func(context.Context, *gamesservice.UpdateGameReq, ...grpc.CallOption) (*gamesservice.UpdateGameRes, error)) *GamesServiceClient_UpdateGame_Call {
	_c.Call.Return(run)
	return _c
}

// NewGamesServiceClient creates a new instance of GamesServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGamesServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
},
) *GamesServiceClient {
	mock := &GamesServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
