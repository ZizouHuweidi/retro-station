// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	games_service "github.com/zizouhuweidi/retro-station/internal/services/catalogwriteservice/internal/shared/grpc/genproto"
)

// GamesServiceServer is an autogenerated mock type for the GamesServiceServer type
type GamesServiceServer struct {
	mock.Mock
}

// CreateGame provides a mock function with given fields: _a0, _a1
func (_m *GamesServiceServer) CreateGame(_a0 context.Context, _a1 *games_service.CreateGameReq) (*games_service.CreateGameRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateGame")
	}

	var r0 *games_service.CreateGameRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *games_service.CreateGameReq) (*games_service.CreateGameRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *games_service.CreateGameReq) *games_service.CreateGameRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*games_service.CreateGameRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *games_service.CreateGameReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGameById provides a mock function with given fields: _a0, _a1
func (_m *GamesServiceServer) GetGameById(_a0 context.Context, _a1 *games_service.GetGameByIdReq) (*games_service.GetGameByIdRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetGameById")
	}

	var r0 *games_service.GetGameByIdRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *games_service.GetGameByIdReq) (*games_service.GetGameByIdRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *games_service.GetGameByIdReq) *games_service.GetGameByIdRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*games_service.GetGameByIdRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *games_service.GetGameByIdReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGame provides a mock function with given fields: _a0, _a1
func (_m *GamesServiceServer) UpdateGame(_a0 context.Context, _a1 *games_service.UpdateGameReq) (*games_service.UpdateGameRes, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGame")
	}

	var r0 *games_service.UpdateGameRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *games_service.UpdateGameReq) (*games_service.UpdateGameRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *games_service.UpdateGameReq) *games_service.UpdateGameRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*games_service.UpdateGameRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *games_service.UpdateGameReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGamesServiceServer creates a new instance of GamesServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGamesServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *GamesServiceServer {
	mock := &GamesServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
