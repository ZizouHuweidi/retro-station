// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	gamesservice "github.com/zizouhuweidi/retro-station/internal/services/catalogwriteservice/internal/shared/grpc/genproto"
)

// GamesServiceServer is an autogenerated mock type for the GamesServiceServer type
type GamesServiceServer struct {
	mock.Mock
}

type GamesServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *GamesServiceServer) EXPECT() *GamesServiceServer_Expecter {
	return &GamesServiceServer_Expecter{mock: &_m.Mock}
}

// CreateGame provides a mock function with given fields: _a0, _a1
func (_m *GamesServiceServer) CreateGame(_a0 context.Context, _a1 *gamesservice.CreateGameReq) (*gamesservice.CreateGameRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gamesservice.CreateGameRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.CreateGameReq) (*gamesservice.CreateGameRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.CreateGameReq) *gamesservice.CreateGameRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gamesservice.CreateGameRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gamesservice.CreateGameReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesServiceServer_CreateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGame'
type GamesServiceServer_CreateGame_Call struct {
	*mock.Call
}

// CreateGame is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *games_service.CreateGameReq
func (_e *GamesServiceServer_Expecter) CreateGame(_a0 interface{}, _a1 interface{}) *GamesServiceServer_CreateGame_Call {
	return &GamesServiceServer_CreateGame_Call{Call: _e.mock.On("CreateGame", _a0, _a1)}
}

func (_c *GamesServiceServer_CreateGame_Call) Run(run func(_a0 context.Context, _a1 *gamesservice.CreateGameReq)) *GamesServiceServer_CreateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gamesservice.CreateGameReq))
	})
	return _c
}

func (_c *GamesServiceServer_CreateGame_Call) Return(_a0 *gamesservice.CreateGameRes, _a1 error) *GamesServiceServer_CreateGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesServiceServer_CreateGame_Call) RunAndReturn(run func(context.Context, *gamesservice.CreateGameReq) (*gamesservice.CreateGameRes, error)) *GamesServiceServer_CreateGame_Call {
	_c.Call.Return(run)
	return _c
}

// GetGameById provides a mock function with given fields: _a0, _a1
func (_m *GamesServiceServer) GetGameById(_a0 context.Context, _a1 *gamesservice.GetGameByIdReq) (*gamesservice.GetGameByIdRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gamesservice.GetGameByIdRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.GetGameByIdReq) (*gamesservice.GetGameByIdRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.GetGameByIdReq) *gamesservice.GetGameByIdRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gamesservice.GetGameByIdRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gamesservice.GetGameByIdReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesServiceServer_GetGameById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGameById'
type GamesServiceServer_GetGameById_Call struct {
	*mock.Call
}

// GetGameById is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *games_service.GetGameByIdReq
func (_e *GamesServiceServer_Expecter) GetGameById(_a0 interface{}, _a1 interface{}) *GamesServiceServer_GetGameById_Call {
	return &GamesServiceServer_GetGameById_Call{Call: _e.mock.On("GetGameById", _a0, _a1)}
}

func (_c *GamesServiceServer_GetGameById_Call) Run(run func(_a0 context.Context, _a1 *gamesservice.GetGameByIdReq)) *GamesServiceServer_GetGameById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gamesservice.GetGameByIdReq))
	})
	return _c
}

func (_c *GamesServiceServer_GetGameById_Call) Return(_a0 *gamesservice.GetGameByIdRes, _a1 error) *GamesServiceServer_GetGameById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesServiceServer_GetGameById_Call) RunAndReturn(run func(context.Context, *gamesservice.GetGameByIdReq) (*gamesservice.GetGameByIdRes, error)) *GamesServiceServer_GetGameById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGame provides a mock function with given fields: _a0, _a1
func (_m *GamesServiceServer) UpdateGame(_a0 context.Context, _a1 *gamesservice.UpdateGameReq) (*gamesservice.UpdateGameRes, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *gamesservice.UpdateGameRes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.UpdateGameReq) (*gamesservice.UpdateGameRes, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gamesservice.UpdateGameReq) *gamesservice.UpdateGameRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gamesservice.UpdateGameRes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gamesservice.UpdateGameReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GamesServiceServer_UpdateGame_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGame'
type GamesServiceServer_UpdateGame_Call struct {
	*mock.Call
}

// UpdateGame is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *games_service.UpdateGameReq
func (_e *GamesServiceServer_Expecter) UpdateGame(_a0 interface{}, _a1 interface{}) *GamesServiceServer_UpdateGame_Call {
	return &GamesServiceServer_UpdateGame_Call{Call: _e.mock.On("UpdateGame", _a0, _a1)}
}

func (_c *GamesServiceServer_UpdateGame_Call) Run(run func(_a0 context.Context, _a1 *gamesservice.UpdateGameReq)) *GamesServiceServer_UpdateGame_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*gamesservice.UpdateGameReq))
	})
	return _c
}

func (_c *GamesServiceServer_UpdateGame_Call) Return(_a0 *gamesservice.UpdateGameRes, _a1 error) *GamesServiceServer_UpdateGame_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GamesServiceServer_UpdateGame_Call) RunAndReturn(run func(context.Context, *gamesservice.UpdateGameReq) (*gamesservice.UpdateGameRes, error)) *GamesServiceServer_UpdateGame_Call {
	_c.Call.Return(run)
	return _c
}

// NewGamesServiceServer creates a new instance of GamesServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGamesServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
},
) *GamesServiceServer {
	mock := &GamesServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
